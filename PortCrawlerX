#include <iostream>
#include <cstring>
#include <sys/socket.h>
#include <netdb.h>
#include <unistd.h>
using namespace std;

int main(int argc, char *argv[])
{
	if (argc != 2)
	{
		cout << "Usage: " << argv[0] << "<hostname or IP address>" << endl;
		return 1;
	}

	struct addrinfo hints, *res, *p;
	int status, sock;

	memset(&hints, 0, sizeof hints);
	hints.ai_family = AF_UNSPEC;
	hints.ai_socktype = SOCK_STREAM;

	if ((status = getaddrinfo(argv[1], NULL, &hints, &res)) != 0)
	{
		cout << "Error: " << gai_strerror(status) << endl;
		return 1;
	}

	char ipstr[INET6_ADDRSTRLEN];

	for (p = res; p != NULL; p = p->ai_next)
	{
		void *addr;
		char *ipver;

		if (p->ai_family == AF_INET)
		{
			struct sockaddr_in *ipv4 = (struct sockaddr_in *) p->ai_addr;
			addr = &(ipv4->sin_addr);
			ipver = "IPv4";
		}
		else
		{
			struct sockaddr_in6 *ipv6 = (struct sockaddr_in6 *) p->ai_addr;
			addr = &(ipv6->sin6_addr);
			ipver = "IPv6";
		}

		inet_ntop(p->ai_family, addr, ipstr, sizeof ipstr);
		cout << ipver << ": " << ipstr << endl;

		sock = socket(p->ai_family, p->ai_socktype, p->ai_protocol);

		if (sock == -1)
		{
			continue;
		}

		if (connect(sock, p->ai_addr, p->ai_addrlen) == -1)
		{
			close(sock);
			continue;
		}

		cout << "Port " << ntohs(((struct sockaddr_in *) p->ai_addr)->sin_port) << " is open." << endl;

		close(sock);
	}

	freeaddrinfo(res);
	return 0;
}
